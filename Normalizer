import torch
import numpy as np

def normalize_region(data):
    normalized_data = np.empty_like(data)
    for i in range(data.shape[0]):
        region_data = data[i, :]
        normalized_data[i, :] = (region_data - region_data.mean()) / region_data.std()
    return normalized_data

def convert_and_rearrange(data_list):
    # Stack along a new dimension
    data_tensor = torch.stack([torch.tensor(data, dtype=torch.float32) for data in data_list[0]])
    # Permute to get the shape [channel, Trials, length_of_data]
    data_tensor = data_tensor.permute(0, 1, 2)
    return data_tensor

# Convert and rearrange the data
Ecog_data_all = normalize_region(convert_and_rearrange(d_all).numpy())
